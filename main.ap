from fastapi import FastAPI, Query
import httpx
from fetchers import CFBDClient

# ðŸ‘‡ Add servers so OpenAPI JSON is valid for GPT Builder
app = FastAPI(
    title="CFB Dual Model API",
    version="1.0.0",
    servers=[{"url": "https://cfbdual2.onrender.com"}]
)


# Helper function to fetch basic game data
async def build_game_data(year: int):
    cfbd = CFBDClient()
    async with httpx.AsyncClient() as client:
        stats = await cfbd.get_team_season_stats(client, year=year)
        ppa = await cfbd.get_team_ppa(client, year=year)
        return {"stats": stats, "ppa": ppa}


@app.get("/")
def root():
    return {"message": "Welcome to the CFB Dual Model API. See /docs for usage."}


@app.get("/games")
async def get_games(team: str, year: int = 2025):
    """Fetch schedule and results for a team."""
    client = CFBDClient()
    async with httpx.AsyncClient() as http_client:
        games = await client.get_games_for_team(http_client, year=year, team=team)
    return {"team": team, "games": games}


@app.get("/predict")
async def predict(
    model: str = Query("conservative", enum=["conservative", "aggressive", "both"]),
    year: int = 2025
):
    """Run conservative, aggressive, or both models on given season data."""
    game_data = await build_game_data(year)

    conservative_score = len(game_data["stats"])  # placeholder
    aggressive_score = len(game_data["ppa"]) * 2  # placeholder

    if model == "conservative":
        return {"model": "conservative", "score": conservative_score}
    elif model == "aggressive":
        return {"model": "aggressive", "score": aggressive_score}
    else:
        return {
            "model": "both",
            "conservative": conservative_score,
            "aggressive": aggressive_score
        }
